DATA STRUCTURE, ACCESSIBLE FROM "SCENE"

PolySurf *scene

Number of Vertices:               scene.nverts
Specific Vertex:                  scene.verts[0-n]
Number of Normals:                scene.nnorms;
Specific Normal:                  scene.norms[0-n]
Number of Faces:                  scene.nfaces
Specific Face:                    scene.faces[0-n]
Number of Lines:                  scene.nlines
Specific Line:                    scene.npoints
Specific Point:                   scene.points[0-n]
Number of Groups:                 scene.ngroups
Specific Group:                   scene.groups[0-n]
Number of Materials:              scene.nmaterials
Specific Material:                scene.materials[0-n]
Number of UVs:                    scene.nuvs
Specific UV:                      scene.uvs[0-n]

Face *poly
Number of Vertices:               poly.nverts
Array of Vertices:                poly.verts[0-(poly.nverts-1)]

FaceVert (v, n, u) -- Data for a specific vertex
  v -- Index into vertices array  (scene.verts[v])
  n -- Index into norms array     (scene.norms[n])
  u -- Index into UV array        (scene.uvs[u])
  
Index of Group:     poly.group    (scene.groups[poly.group])
Index of Material:  poly.material (scene.materials[poly.material])

Material data:

Colors:
Material ambient:                 material.a
Material diffuse:                 material.d
Material specular:                material.s

Material spec exponent:           material.exp
Material alpha:                   material.alpha

Illumination model:               material.illum_model
                                  (0 - constant, use only d as color)
                                  (1 - Ambient + diffuse, without specular)
                                  (2 - Full Blinn shading model)
                                  
Pixmaps:
Material ambient color map:       material.amap
Material diffuse color map:       material.dmap
Material specular color map:      material.smap

  /*
  0 - color = Kd
  1 - color = KaIa + Kd { SUM j = 1...ls, (N * Lj)Ij }
  2 - color = KaIa + Kd { SUM j = 1...ls, (N * Lj)Ij } + Ks { SUM j = 1...ls, ((H * Hj) ^ Ns ) Ij }
  
  Ia - Ambient Light
  Ij - Light j's intensity
  Ka - Ambient reflectance
  Kd - Diffuse reflectance
  Ks - Specular reflectance
  H - Unit vector bisector between L and V
  L - Light unit vector
  V - View unit vector
  N - Surface normal
  
  For texture mapped:
  
  Ka - ( 1 - texture alpha ) * material ambient + texture alpha * texture value
  Kd - ( 1 - texture alpha ) * material diffuse + texture alpha * texture value 
  
  */
